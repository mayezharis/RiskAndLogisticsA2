model ModelName
  uses "mmxprs"
  ! uses "mminsight" ! uncomment this line for an Xpress Insight model

  filename := "Data_Xpress.txt";

  forward function removeFromList(myList: list of integer, item: integer): list of integer
  forward function getValOfList(myList: list of integer, index: integer): integer

  declarations
    ! The number of product groups
    nbProductGroups: integer
    ! The maximal number of product groups per order
    nbOrderSize: integer
    ! The number of shelf spaces
    nbShelves: integer
    ! The number of orders
    nbOrders: integer
  end-declarations

  ! Reading the data
  initializations from filename
    nbProductGroups nbOrderSize nbOrders nbShelves
  end-initializations

  declarations
    ! The set of product groups
    ProductGroups = 1..nbProductGroups
    ! The set of orders
    Orders = 1..nbOrders
    ! The set of shelves
    Shelves = 1..nbShelves

    ! The matrix of orders
    OrderMatrix: array(Orders,1..nbOrderSize) of integer

    ! The distance matrix between pairs of shelves
    DistanceShelves: array(Shelves,Shelves) of integer
    ! The distance vector between the packaging area and each shelf
    DistancePackaging: array(Shelves) of integer

    ! Gives for each shelf the assigned product group
    ShelfAllocation: array(Shelves) of integer
  end-declarations








  function randomConstructionHeuristic(the_Shelves: set of integer, the_nbProductGroups: integer): array(Shelves) of integer
    declarations
      P_temp: list of integer
      new_ShelfAllocation: array(the_Shelves) of integer
    end-declarations

    P_temp := list(1..the_nbProductGroups)

    forall(s in the_Shelves) do
      if(getsize(P_temp) <> 0) then
        randInt := integer(round((getsize(P_temp)*random)+0.5))
        randProd := getValOfList(P_temp, randInt)
      else
        randProd := 100
      end-if


      new_ShelfAllocation(s) := randProd

      P_temp := removeFromList(P_temp, randProd)

      ! if(getsize(P_temp) = 0) then
      !   P_temp := list(1..the_nbProductGroups)
      ! end-if

    end-do

    returned:= new_ShelfAllocation

  end-function



  function removeFromList(myList: list of integer, item: integer): list of integer
    declarations
      newList: list of integer
    end-declarations

    newList := []

    forall(i in myList) do
      if i <> item then
        newList += [i]
      end-if
    end-do

    returned := newList
  end-function

  function getValOfList(myList: list of integer, index: integer): integer
    temp_counter := 1

    forall(i in myList) do

      if (temp_counter = index) then
        returned := i
      end-if
      temp_counter += 1
    end-do
  end-function



  ShelfAllocation := randomConstructionHeuristic(Shelves, nbProductGroups)

  writeln(ShelfAllocation)



end-model


