model "The Layout Problem"
  uses "mmsystem", "mmjobs", "mmxprs", "mmxnlp"
setparam("XPRS_VERBOSE", true)

! ============================================================================
! Reading problem parameters
! ============================================================================
filename := "assignment_files/Data_Xpress.txt";
start_time := gettime


declarations
  ! The number of product groups
  nbProductGroups: integer
  ! The maximal number of product groups per order
  nbOrderSize: integer
  ! The number of shelf spaces
  nbShelves: integer
  ! The number of orders
  nbOrders: integer
end-declarations

! Reading the data
initializations from filename
  nbProductGroups nbOrderSize nbOrders nbShelves
end-initializations

declarations
  ! The set of product groups
  ProductGroups = 1..nbProductGroups
  ! The set of orders
  Orders = 1..nbOrders
  ! The sets of shelves
  Shelves = 1..nbShelves
  ShelvesDoor = 0..nbShelves

  ! The matrix of orders
  OrderMatrix: array(Orders,1..nbOrderSize) of integer

  ! The distance matrix between pairs of shelves
  DistanceShelves: array(Shelves,Shelves) of integer
  ! The distance vector between the packaging area and each shelf
  DistancePackaging: array(Shelves) of integer

  ! Gives for each shelf the assigned product group
  ShelfAllocation: array(Shelves) of integer
end-declarations

! Reading the data
initializations from filename
  OrderMatrix as "Orders"
  ShelfAllocation as "Allocations"
  DistanceShelves as "DistanceShelfShelf"
  DistancePackaging as "DistancePackagingShelf"
end-initializations


declarations
    x: array(ShelvesDoor, ProductGroups) of integer ! x_sp
    y: array(ShelvesDoor, ShelvesDoor, Orders) of mpvar ! y_ijk
    z: array(ShelvesDoor, Orders) of mpvar ! z_ik
    u: array(ShelvesDoor, Orders) of mpvar ! u_ik
end-declarations


! ! Decision variables
! forall(i in ShelvesDoor, p in ProductGroups) do
!     x(i,p) is_binary
! end-do

forall(i in ShelvesDoor, j in ShelvesDoor, k in Orders) do
    y(i,j,k) is_binary
end-do

forall(i in ShelvesDoor, k in Orders) do
    z(i,k) is_binary
end-do

forall(i in ShelvesDoor, k in Orders) do
  u(i,k) is_integer
end-do




! ===========================================================
! Adding the door to the distance matrix
! ===========================================================

declarations
    FullDistanceMatrix: array(ShelvesDoor, ShelvesDoor) of integer
    ! i, j: integer
end-declarations

forall(i in Shelves) do
  FullDistanceMatrix(0, i) := DistancePackaging(i)
  FullDistanceMatrix(i, 0) := DistancePackaging(i)
end-do

FullDistanceMatrix(0,0) := 0

forall(i in Shelves) do
  forall(j in Shelves) do
    FullDistanceMatrix(i,j) := DistanceShelves(i,j)
  end-do
end-do

! ! Code to check whether the full distance matrix works
! writeln("Full Distance Matrix:")
! forall(i in ShelvesDoor) do
!     forall(j in ShelvesDoor) do
!         write(FullDistanceMatrix(i, j), " ")
!     end-do
!     writeln
! end-do
! ===========================================================
! ===========================================================



! ===========================================================
! Convert the Allocations vector to a matrix (i've just changed x(i,p) instead now)
! ===========================================================
! declarations
!   AllocationsMatrix: array(ShelvesDoor, ProductGroups) of integer
! end-declarations

! forall(i in ShelvesDoor, p in ProductGroups) AllocationsMatrix(i, p) := 0

! forall(p in ProductGroups) AllocationsMatrix(0, p) := 0

! ! Populate AllocationsMatrix based on the Allocations vector
! forall(i in Shelves) do
!   if ShelfAllocation(i) <> 0 then
!     AllocationsMatrix(i, ShelfAllocation(i)) := 1
!   end-if
! end-do 



! forall(i in Shelves) do
!   if (ShelfAllocation(i) <> 0) then
!     x(i, ShelfAllocation(i)) := 1
!   end-if
! end-do

forall(p in ProductGroups) x(0,p) := 0 

forall(i in Shelves) do
  if (ShelfAllocation(i) <> 0) then
    forall(p in ProductGroups) do
      if (p = ShelfAllocation(i)) then
        x(i,p) := 1
      else
        x(i,p) := 0
      end-if
    end-do
  end-if
end-do

! ! Code to check whether the allocation matrix works
! writeln("Allocation Matrix:")
! forall(i in ShelvesDoor) do
!     write("Shelf ", i, ":\t")
!     forall(p in ProductGroups) do
!         write(AllocationsMatrix(i, p), " ")
!     end-do
!     writeln
! end-do
! ===========================================================
! ===========================================================


! ===========================================================
! Convert the Order matrix to full size
! ===========================================================
declarations
  FullOrderMatrix: array(Orders, ProductGroups) of integer
end-declarations

forall(k in Orders, p in ProductGroups) FullOrderMatrix(k, p) := 0

forall(k in Orders, p in 1..nbOrderSize) do
    if(OrderMatrix(k,p) <> 0) then
      FullOrderMatrix(k, OrderMatrix(k,p)) := 1
    end-if
end-do

! ! Code to check whether the full order matrix works
! writeln("Full Order Matrix:")
! forall(k in Orders) do
!     write("Order ", k, ":\t")
!     forall(p in ProductGroups) do
!         write(FullOrderMatrix(k, p), " ")
!     end-do
!     writeln
! end-do
! ===========================================================
! ===========================================================



! ===========================================================
! Constructing |V_k|
! ===========================================================
declarations
  nbProductsPerOrder: array(Orders) of integer
end-declarations

forall(k in Orders) do
  nbProductsPerOrder(k) := sum(p in ProductGroups) FullOrderMatrix(k,p)
end-do

! writeln("V_k")
! forall(k in Orders) do
!   write("Order ", k, ": ", nbProductsPerOrder(k))
!   writeln
! end-do

! ===========================================================
! ===========================================================


! Objective function

forall(k in Orders) do
DistancePerOrder(k):= sum(i in ShelvesDoor, j in ShelvesDoor | i <> j) (FullDistanceMatrix(i,j) * y(i,j,k))
end-do

TotalWalkingDistance := sum(k in Orders) DistancePerOrder(k)



! Constraints

! Must start and end each order at the door to Packaging.
forall(k in Orders) do
  StartFromDoorCS(k) := sum(j in ShelvesDoor)(y(0,j,k)) = 1
  EndAtDoorCS(k) := sum(i in ShelvesDoor)(y(i,0,k)) = 1
end-do


! ----------------------------------------------------------------
! Each shelf should not be visited more than once per order
forall(j in ShelvesDoor, k in Orders) do
  MaxOneDepartureCS(j,k) := sum(i in ShelvesDoor)(y(i,j,k)) <= 1
end-do

forall(i in ShelvesDoor, k in Orders) do
  MaxOneArrivalCS(i,k) := sum(j in ShelvesDoor)(y(i,j,k)) <= 1
end-do
! ----------------------------------------------------------------

! Can't go from shelf i to shelf i
forall(i in ShelvesDoor, k in Orders) NoReturnCS(i,k) := y(i,i,k) = 0

! Only visit shelves that correspond to the products in the order
forall(k in Orders, j in Shelves) do
  VisitRequiredCS(k,j) := sum(i in ShelvesDoor)(y(i,j,k)) = sum(p in ProductGroups | FullOrderMatrix(k,p) = 1) x(j,p)
end-do
! Might need to change the above constraint to consider ShelvesDoor everywhere



! rule_no_subtour:
!     forall (i, j in nodes : j != 1) u[i] + x[i][j] <= u[j] + (n - 1) * (1 - x[i][j]);

!     u[1] == 0; // Fixes the rank of the first node

! MTZ constraints
forall(k in Orders) do
  forall(i in ShelvesDoor, j in ShelvesDoor | i <> 0 and j <> 0) do
    MTZ_1CS(k,i,j) := u(i,k) - u(j,k) + 1 <= (nbProductsPerOrder(k) - 1)*(1- y(i,j,k))
    ! u(j,k) = 0
  end-do
end-do

! forall(k in Orders, i in ShelvesDoor) do
!   MTZ_2CS(k,i) := u(i,k) >= 1 
!   MTZ_3CS(k,i) := u(i,k) <= nbProductsPerOrder(k)
! end-do

minimise(TotalWalkingDistance)

end_time := gettime


procedure print_status
declarations
  status: string
end-declarations
case getprobstat of
  XPRS_OPT: status:="Solved to optimality"
  XPRS_UNF: status:="Unfinished"
  XPRS_INF: status:="Infeasible"
  XPRS_UNB: status:="Unbounded"
  XPRS_OTH: status:="Unsolved or objective worse than cutoff"
  else status:="???"
end-case
writeln("Problem status: ", status)
end-procedure


! =====================================================================
! =====================================================================
! declarations
!     ! Add a variable to keep track of iteration count
!     iter: integer
!     status: integer
! end-declarations

! ! Initialize iteration count
! iter := 0

! ! Before optimization starts, print initial values
! writeln("Initial values:")
! writeln("---------------")
! print_status ! Print problem status
! ! Add more print statements as needed to inspect initial values of variables and constraints

! ! Inside the optimization loop, periodically print intermediate values
! while (status <> XPRS_OPT and status <> XPRS_UNF) do
!     iter := iter + 1 ! Increment iteration count
!     writeln("Iteration ", iter, ":")
!     writeln("---------------")
!     ! Add print statements to inspect values of variables and constraints
!     status := getprobstat ! Update problem status
!     writeln("Problem status: ", status)
!     ! Add more print statements as needed to inspect intermediate values
! end-do

! ! After optimization, print final solution
! writeln("Final solution:")
! writeln("---------------")
! print_status ! Print final problem status
! ! Add more print statements as needed to inspect final values of variables and constraints

! =====================================================================
! =====================================================================
! =====================================================================


! Print solution
forall(k in Orders) do
    writeln("Order ", k, ":")
    forall(i in ShelvesDoor, j in ShelvesDoor | i <> j) do
        if (getsol(y(i,j,k)) > 0.5) then
            writeln("   From shelf ", i, " to shelf ", j)
        end-if
    end-do
    writeln
end-do
writeln("Total Walking Distance: ", getobjval)

print_status
writeln("Time elapsed: ", end_time-start_time, " seconds.")

end-model

