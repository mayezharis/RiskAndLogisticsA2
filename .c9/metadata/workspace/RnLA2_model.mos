{"changed":true,"filter":false,"title":"RnLA2_model.mos","tooltip":"/RnLA2_model.mos","value":"model \"The Layout Problem\"\n  uses \"mmsystem\", \"mmjobs\", \"mmxprs\", \"mmxnlp\"\nsetparam(\"XPRS_VERBOSE\", true)\n\n! ============================================================================\n! Reading problem parameters\n! ============================================================================\nfilename := \"assignment_files/Data_Xpress.txt\";\nstart_time := gettime\n\n\ndeclarations\n  ! The number of product groups\n  nbProductGroups: integer\n  ! The maximal number of product groups per order\n  nbOrderSize: integer\n  ! The number of shelf spaces\n  nbShelves: integer\n  ! The number of orders\n  nbOrders: integer\nend-declarations\n\n! Reading the data\ninitializations from filename\n  nbProductGroups nbOrderSize nbOrders nbShelves\nend-initializations\n\ndeclarations\n  ! The set of product groups\n  ProductGroups = 1..nbProductGroups\n  ! The set of orders\n  Orders = 1..nbOrders\n  ! The sets of shelves\n  Shelves = 1..nbShelves\n  ShelvesDoor = 0..nbShelves\n\n  ! The matrix of orders\n  OrderMatrix: array(Orders,1..nbOrderSize) of integer\n\n  ! The distance matrix between pairs of shelves\n  DistanceShelves: array(Shelves,Shelves) of integer\n  ! The distance vector between the packaging area and each shelf\n  DistancePackaging: array(Shelves) of integer\n\n  ! Gives for each shelf the assigned product group\n  ShelfAllocation: array(Shelves) of integer\nend-declarations\n\n! Reading the data\ninitializations from filename\n  OrderMatrix as \"Orders\"\n  ShelfAllocation as \"Allocations\"\n  DistanceShelves as \"DistanceShelfShelf\"\n  DistancePackaging as \"DistancePackagingShelf\"\nend-initializations\n\n\ndeclarations\n    x: array(ShelvesDoor, ProductGroups) of integer ! x_sp\n    y: array(ShelvesDoor, ShelvesDoor, Orders) of mpvar ! y_ijk\n    ! z: array(ShelvesDoor, Orders) of mpvar ! z_ik\n    u: array(ShelvesDoor, Orders) of mpvar ! u_ik\nend-declarations\n\n\n\n! ! Decision variables\n! forall(i in ShelvesDoor, p in ProductGroups) do\n!     x(i,p) is_binary\n! end-do\n\nforall(i in ShelvesDoor, j in ShelvesDoor, k in Orders) do\n    y(i,j,k) is_binary\n    ! z(i,k) is_binary\n    u(i,k) is_integer\nend-do\n\n\n\n\n! ===========================================================\n! Adding the door to the distance matrix\n! ===========================================================\n\ndeclarations\n    FullDistanceMatrix: array(ShelvesDoor, ShelvesDoor) of integer\n    ! i, j: integer\nend-declarations\n\nforall(i in Shelves) do\n  FullDistanceMatrix(0, i) := DistancePackaging(i)\n  FullDistanceMatrix(i, 0) := DistancePackaging(i)\nend-do\n\nFullDistanceMatrix(0,0) := 0\n\nforall(i in Shelves) do\n  forall(j in Shelves) do\n    FullDistanceMatrix(i,j) := DistanceShelves(i,j)\n  end-do\nend-do\n\n\n\n! ! Code to check whether the full distance matrix works\n! writeln(\"Full Distance Matrix:\")\n! forall(i in ShelvesDoor) do\n!     forall(j in ShelvesDoor) do\n!         write(FullDistanceMatrix(i, j), \" \")\n!     end-do\n!     writeln\n! end-do\n! ===========================================================\n! ===========================================================\n\n\n\n! ===========================================================\n! Convert the Allocations vector to a matrix (i've just changed x(i,p) instead now)\n! ===========================================================\n! declarations\n!   AllocationsMatrix: array(ShelvesDoor, ProductGroups) of integer\n! end-declarations\n\n! forall(i in ShelvesDoor, p in ProductGroups) AllocationsMatrix(i, p) := 0\n\n! forall(p in ProductGroups) AllocationsMatrix(0, p) := 0\n\n! ! Populate AllocationsMatrix based on the Allocations vector\n! forall(i in Shelves) do\n!   if ShelfAllocation(i) <> 0 then\n!     AllocationsMatrix(i, ShelfAllocation(i)) := 1\n!   end-if\n! end-do\n\n\n\n! forall(i in Shelves) do\n!   if (ShelfAllocation(i) <> 0) then\n!     x(i, ShelfAllocation(i)) := 1\n!   end-if\n! end-do\n\nforall(p in ProductGroups) x(0,p) := 0\n\nforall(i in Shelves | ShelfAllocation(i) <> 0) do\n    forall(p in ProductGroups) do\n      if (p = ShelfAllocation(i)) then\n        x(i,p) := 1\n      else\n        x(i,p) := 0\n      end-if\n    end-do\nend-do\n\n\n! ! Code to check whether the allocation matrix works\n! writeln(\"Allocation Matrix:\")\n! forall(i in ShelvesDoor) do\n!     write(\"Shelf \", i, \":\\t\")\n!     forall(p in ProductGroups) do\n!         write(AllocationsMatrix(i, p), \" \")\n!     end-do\n!     writeln\n! end-do\n! ===========================================================\n! ===========================================================\n\n\n! ===========================================================\n! Convert the Order matrix to full size\n! ===========================================================\ndeclarations\n  FullOrderMatrix: array(Orders, ProductGroups) of integer\nend-declarations\n\nforall(k in Orders, p in ProductGroups) FullOrderMatrix(k, p) := 0\n\nforall(k in Orders, p in 1..nbOrderSize) do\n  if(OrderMatrix(k,p) <> 0) then\n    FullOrderMatrix(k, OrderMatrix(k,p)) := 1\n  end-if\nend-do\n\n! ! Code to check whether the full order matrix works\n! writeln(\"Full Order Matrix:\")\n! forall(k in Orders) do\n!     write(\"Order \", k, \":\\t\")\n!     forall(p in ProductGroups) do\n!         write(FullOrderMatrix(k, p), \" \")\n!     end-do\n!     writeln\n! end-do\n! ===========================================================\n! ===========================================================\n\n\n\n! ===========================================================\n! Constructing |V_k|\n! ===========================================================\ndeclarations\n  nbProductsPerOrder: array(Orders) of integer\nend-declarations\n\nforall(k in Orders) do\n  nbProductsPerOrder(k) := sum(p in ProductGroups) FullOrderMatrix(k,p)\nend-do\n\n! writeln(\"V_k\")\n! forall(k in Orders) do\n!   write(\"Order \", k, \": \", nbProductsPerOrder(k))\n!   writeln\n! end-do\n\n! ===========================================================\n! ===========================================================\n\n\n\n\n\n! Constraints\n\n! Must start and end each order at the door to Packaging.\nforall(k in Orders) do\n  StartFromDoorCS(k) := sum(j in ShelvesDoor)(y(0,j,k)) = 1\n  EndAtDoorCS(k) := sum(i in ShelvesDoor)(y(i,0,k)) = 1\nend-do\n\n\n! ----------------------------------------------------------------\n! Each shelf should not be visited more than once per order\nforall(j in ShelvesDoor, k in Orders) do\n  MaxOneDepartureCS(j,k) := sum(i in ShelvesDoor)(y(i,j,k)) <= 1\nend-do\n\nforall(i in ShelvesDoor, k in Orders) do\n  MaxOneArrivalCS(i,k) := sum(j in ShelvesDoor)(y(i,j,k)) <= 1\nend-do\n! ----------------------------------------------------------------\n\n! Can't go from shelf i to shelf i\nforall(i in ShelvesDoor, k in Orders) NoReturnCS(i,k) := y(i,i,k) = 0\n\n! Only visit shelves that correspond to the products in the order\nforall(k in Orders, j in Shelves) do\n  VisitRequiredCS(k,j) := sum(i in ShelvesDoor)(y(i,j,k)) = sum(p in ProductGroups | FullOrderMatrix(k,p) = 1) x(j,p)\nend-do\n! Might need to change the above constraint to consider ShelvesDoor everywhere\n\n\n\n\n! ! MTZ constraints\nforall(k in Orders) do\n  MTZ_doorCS1(k) := u(0,k) = 1\n  ! MTZ_doorCS2(k) := u(nbProductsPerOrder(k)+2,k) = 0\n  ! forall(i in nbProductsPerOrder(k)+2..7) MTZ_staydoorCS(i,k) := u(i,k) = 0\n  forall(i in Shelves, j in Shelves| i <> j) do\n    ! MTZ_1CS(k,i,j) := u(i,k) - u(j,k) + 1 <= (nbProductsPerOrder(k) - 1)*(1- y(i,j,k))\n    MTZ_CS(k,i,j) := u(i,k) - u(j,k) + nbProductsPerOrder(k)*y(i,j,k) <= nbProductsPerOrder(k)-1\n  end-do\nend-do\n\n\n\nforall(k in Orders, i in Shelves) do\n    MTZ_2CS(k,i) := u(i,k) >= 1\n    ! MTZ_3CS(k,i) := u(i,k) <= nbProductsPerOrder(k) + 1\nend-do\n\n\n\n! Objective function\n\nforall(k in Orders) do\nDistancePerOrder(k):= sum(i in ShelvesDoor, j in ShelvesDoor | i <> j) (FullDistanceMatrix(i,j) * y(i,j,k))\nend-do\n\nTotalWalkingDistance := sum(k in Orders) DistancePerOrder(k)\n\n\n\nminimise(TotalWalkingDistance)\n\nend_time := gettime\n\n\nprocedure print_status\ndeclarations\n  status: string\nend-declarations\ncase getprobstat of\n  XPRS_OPT: status:=\"Solved to optimality\"\n  XPRS_UNF: status:=\"Unfinished\"\n  XPRS_INF: status:=\"Infeasible\"\n  XPRS_UNB: status:=\"Unbounded\"\n  XPRS_OTH: status:=\"Unsolved or objective worse than cutoff\"\n  else status:=\"???\"\nend-case\nwriteln(\"Problem status: \", status)\nend-procedure\n\n\n! =====================================================================\n! =====================================================================\n! declarations\n!     ! Add a variable to keep track of iteration count\n!     iter: integer\n!     status: integer\n! end-declarations\n\n! ! Initialize iteration count\n! iter := 0\n\n! ! Before optimization starts, print initial values\n! writeln(\"Initial values:\")\n! writeln(\"---------------\")\n! print_status ! Print problem status\n! ! Add more print statements as needed to inspect initial values of variables and constraints\n\n! ! Inside the optimization loop, periodically print intermediate values\n! while (status <> XPRS_OPT and status <> XPRS_UNF) do\n!     iter := iter + 1 ! Increment iteration count\n!     writeln(\"Iteration \", iter, \":\")\n!     writeln(\"---------------\")\n!     ! Add print statements to inspect values of variables and constraints\n!     status := getprobstat ! Update problem status\n!     writeln(\"Problem status: \", status)\n!     ! Add more print statements as needed to inspect intermediate values\n! end-do\n\n! ! After optimization, print final solution\n! writeln(\"Final solution:\")\n! writeln(\"---------------\")\n! print_status ! Print final problem status\n! ! Add more print statements as needed to inspect final values of variables and constraints\n\n! =====================================================================\n! =====================================================================\n! =====================================================================\n\n\n! Print solution\n! declarations\n! shelves_visited: list of integer\n! end-declarations\n\n! writeln(\"Routes for each order:\")\n! writeln(\"-----------------------\")\n! forall(k in Orders) do\n!     writeln(\"Order \", k, \":\")\n!     writeln(\"-------\")\n!     writeln(\"Route:\")\n!     writeln(\"------\")\n!     ! Initialize a list to store visited shelves\n!     shelves_visited := []\n\n!     forall(i in ShelvesDoor, j in ShelvesDoor | i <> j) do\n!         if (getsol(y(i,j,k)) > 0.5) then\n!             shelves_visited.add(j) ! Add the visited shelf to the list\n!         end-if\n!     end-do\n\n!     ! Print the route\n!     writeln(\"From door to shelf \", shelves_visited.at(1))\n!     forall(idx in 2..shelves_visited.size) do\n!         writeln(\"From shelf \", shelves_visited.at(idx-1), \" to shelf \", shelves_visited.at(idx))\n!     end-do\n!     writeln(\"From shelf \", shelves_visited.at(shelves_visited.size), \" back to door\")\n!     writeln\n! end-do\n\n\n\nforall(k in Orders) do\n    writeln(\"Order \", k, \":\")\n    forall(i in ShelvesDoor, j in ShelvesDoor | i <> j) do\n        if (getsol(y(i,j,k)) > 0.5) then\n            write(i, \" --> \", j, \", \" )\n        end-if\n    end-do\n    writeln\nend-do\nwriteln(\"Total Walking Distance: \", getobjval)\n\nprint_status\nwriteln(\"Time elapsed: \", end_time-start_time, \" seconds.\")\n\n\nend-model\n\n","undoManager":{"mark":-166,"position":100,"stack":[[{"start":{"row":152,"column":1},"end":{"row":152,"column":2},"action":"insert","lines":["r"],"id":8893}],[{"start":{"row":152,"column":1},"end":{"row":152,"column":2},"action":"remove","lines":["r"],"id":8894}],[{"start":{"row":152,"column":0},"end":{"row":152,"column":1},"action":"remove","lines":["p"],"id":8895}],[{"start":{"row":152,"column":0},"end":{"row":152,"column":1},"action":"insert","lines":["w"],"id":8896}],[{"start":{"row":152,"column":1},"end":{"row":152,"column":2},"action":"insert","lines":["r"],"id":8897}],[{"start":{"row":152,"column":2},"end":{"row":152,"column":3},"action":"insert","lines":["i"],"id":8898}],[{"start":{"row":152,"column":3},"end":{"row":152,"column":4},"action":"insert","lines":["t"],"id":8899}],[{"start":{"row":152,"column":4},"end":{"row":152,"column":5},"action":"insert","lines":["e"],"id":8900}],[{"start":{"row":152,"column":5},"end":{"row":152,"column":6},"action":"insert","lines":["l"],"id":8901}],[{"start":{"row":152,"column":6},"end":{"row":152,"column":7},"action":"insert","lines":["n"],"id":8902}],[{"start":{"row":152,"column":7},"end":{"row":152,"column":8},"action":"insert","lines":["("],"id":8903}],[{"start":{"row":152,"column":8},"end":{"row":152,"column":9},"action":"insert","lines":["t"],"id":8904}],[{"start":{"row":152,"column":9},"end":{"row":152,"column":10},"action":"insert","lines":["i"],"id":8905}],[{"start":{"row":152,"column":10},"end":{"row":152,"column":11},"action":"insert","lines":["m"],"id":8906}],[{"start":{"row":152,"column":11},"end":{"row":152,"column":12},"action":"insert","lines":["e"],"id":8907}],[{"start":{"row":152,"column":11},"end":{"row":152,"column":12},"action":"remove","lines":["e"],"id":8908}],[{"start":{"row":152,"column":10},"end":{"row":152,"column":11},"action":"remove","lines":["m"],"id":8909}],[{"start":{"row":152,"column":9},"end":{"row":152,"column":10},"action":"remove","lines":["i"],"id":8910}],[{"start":{"row":152,"column":8},"end":{"row":152,"column":9},"action":"remove","lines":["t"],"id":8911}],[{"start":{"row":152,"column":8},"end":{"row":152,"column":9},"action":"insert","lines":["\""],"id":8912}],[{"start":{"row":152,"column":9},"end":{"row":152,"column":10},"action":"insert","lines":["T"],"id":8913}],[{"start":{"row":152,"column":10},"end":{"row":152,"column":11},"action":"insert","lines":["i"],"id":8914}],[{"start":{"row":152,"column":11},"end":{"row":152,"column":12},"action":"insert","lines":["m"],"id":8915}],[{"start":{"row":152,"column":12},"end":{"row":152,"column":13},"action":"insert","lines":["e"],"id":8916}],[{"start":{"row":152,"column":13},"end":{"row":152,"column":14},"action":"insert","lines":[" "],"id":8917}],[{"start":{"row":152,"column":14},"end":{"row":152,"column":15},"action":"insert","lines":["e"],"id":8918}],[{"start":{"row":152,"column":15},"end":{"row":152,"column":16},"action":"insert","lines":["l"],"id":8919}],[{"start":{"row":152,"column":16},"end":{"row":152,"column":17},"action":"insert","lines":["a"],"id":8920}],[{"start":{"row":152,"column":17},"end":{"row":152,"column":18},"action":"insert","lines":["p"],"id":8921}],[{"start":{"row":152,"column":18},"end":{"row":152,"column":19},"action":"insert","lines":["s"],"id":8922}],[{"start":{"row":152,"column":19},"end":{"row":152,"column":20},"action":"insert","lines":["e"],"id":8923}],[{"start":{"row":152,"column":20},"end":{"row":152,"column":21},"action":"insert","lines":["d"],"id":8924}],[{"start":{"row":152,"column":21},"end":{"row":152,"column":22},"action":"insert","lines":[":"],"id":8925}],[{"start":{"row":152,"column":22},"end":{"row":152,"column":23},"action":"insert","lines":[" "],"id":8926}],[{"start":{"row":152,"column":23},"end":{"row":152,"column":24},"action":"insert","lines":["\""],"id":8927}],[{"start":{"row":152,"column":24},"end":{"row":152,"column":25},"action":"insert","lines":[","],"id":8928}],[{"start":{"row":152,"column":25},"end":{"row":152,"column":26},"action":"insert","lines":[" "],"id":8929}],[{"start":{"row":152,"column":26},"end":{"row":152,"column":27},"action":"insert","lines":["e"],"id":8930}],[{"start":{"row":152,"column":27},"end":{"row":152,"column":28},"action":"insert","lines":["n"],"id":8931}],[{"start":{"row":152,"column":28},"end":{"row":152,"column":29},"action":"insert","lines":["d"],"id":8932}],[{"start":{"row":152,"column":29},"end":{"row":152,"column":30},"action":"insert","lines":["_"],"id":8933}],[{"start":{"row":152,"column":30},"end":{"row":152,"column":31},"action":"insert","lines":["t"],"id":8934}],[{"start":{"row":152,"column":31},"end":{"row":152,"column":32},"action":"insert","lines":["i"],"id":8935}],[{"start":{"row":152,"column":32},"end":{"row":152,"column":33},"action":"insert","lines":["m"],"id":8936}],[{"start":{"row":152,"column":26},"end":{"row":152,"column":33},"action":"remove","lines":["end_tim"],"id":8937},{"start":{"row":152,"column":26},"end":{"row":152,"column":34},"action":"insert","lines":["end_time"]}],[{"start":{"row":152,"column":34},"end":{"row":152,"column":35},"action":"insert","lines":[" "],"id":8938}],[{"start":{"row":152,"column":35},"end":{"row":152,"column":36},"action":"insert","lines":["-"],"id":8939}],[{"start":{"row":152,"column":36},"end":{"row":152,"column":37},"action":"insert","lines":[" "],"id":8940}],[{"start":{"row":152,"column":37},"end":{"row":152,"column":38},"action":"insert","lines":["s"],"id":8941},{"start":{"row":152,"column":38},"end":{"row":152,"column":39},"action":"insert","lines":["t"]}],[{"start":{"row":152,"column":39},"end":{"row":152,"column":40},"action":"insert","lines":["a"],"id":8942}],[{"start":{"row":152,"column":40},"end":{"row":152,"column":41},"action":"insert","lines":["r"],"id":8943}],[{"start":{"row":152,"column":41},"end":{"row":152,"column":42},"action":"insert","lines":["t"],"id":8944}],[{"start":{"row":152,"column":42},"end":{"row":152,"column":43},"action":"insert","lines":["_"],"id":8945}],[{"start":{"row":152,"column":43},"end":{"row":152,"column":44},"action":"insert","lines":["t"],"id":8946}],[{"start":{"row":152,"column":44},"end":{"row":152,"column":45},"action":"insert","lines":["i"],"id":8947}],[{"start":{"row":152,"column":45},"end":{"row":152,"column":46},"action":"insert","lines":["m"],"id":8948}],[{"start":{"row":152,"column":46},"end":{"row":152,"column":47},"action":"insert","lines":["e"],"id":8949}],[{"start":{"row":152,"column":47},"end":{"row":152,"column":48},"action":"insert","lines":[")"],"id":8950}],[{"start":{"row":151,"column":0},"end":{"row":153,"column":2},"action":"remove","lines":["end_time := gettime","writeln(\"Time elapsed: \", end_time - start_time)","(!"],"id":8951}],[{"start":{"row":63,"column":0},"end":{"row":64,"column":0},"action":"insert","lines":["",""],"id":8952}],[{"start":{"row":64,"column":0},"end":{"row":66,"column":2},"action":"insert","lines":["end_time := gettime","writeln(\"Time elapsed: \", end_time - start_time)","(!"],"id":8953}],[{"start":{"row":64,"column":0},"end":{"row":66,"column":2},"action":"remove","lines":["end_time := gettime","writeln(\"Time elapsed: \", end_time - start_time)","(!"],"id":8954}],[{"start":{"row":100,"column":6},"end":{"row":101,"column":0},"action":"insert","lines":["",""],"id":8955}],[{"start":{"row":101,"column":0},"end":{"row":102,"column":0},"action":"insert","lines":["",""],"id":8956}],[{"start":{"row":102,"column":0},"end":{"row":104,"column":2},"action":"insert","lines":["end_time := gettime","writeln(\"Time elapsed: \", end_time - start_time)","(!"],"id":8957}],[{"start":{"row":102,"column":0},"end":{"row":104,"column":2},"action":"remove","lines":["end_time := gettime","writeln(\"Time elapsed: \", end_time - start_time)","(!"],"id":8964}],[{"start":{"row":102,"column":0},"end":{"row":104,"column":2},"action":"insert","lines":["end_time := gettime","writeln(\"Time elapsed: \", end_time - start_time)","(!"],"id":8965}],[{"start":{"row":71,"column":0},"end":{"row":71,"column":2},"action":"insert","lines":["! "],"id":8966},{"start":{"row":72,"column":0},"end":{"row":72,"column":2},"action":"insert","lines":["! "]},{"start":{"row":73,"column":0},"end":{"row":73,"column":2},"action":"insert","lines":["! "]},{"start":{"row":74,"column":0},"end":{"row":74,"column":2},"action":"insert","lines":["! "]},{"start":{"row":75,"column":0},"end":{"row":75,"column":2},"action":"insert","lines":["! "]}],[{"start":{"row":102,"column":0},"end":{"row":104,"column":2},"action":"remove","lines":["end_time := gettime","writeln(\"Time elapsed: \", end_time - start_time)","(!"],"id":8968}],[{"start":{"row":196,"column":0},"end":{"row":198,"column":2},"action":"insert","lines":["end_time := gettime","writeln(\"Time elapsed: \", end_time - start_time)","(!"],"id":8969}],[{"start":{"row":196,"column":0},"end":{"row":198,"column":2},"action":"remove","lines":["end_time := gettime","writeln(\"Time elapsed: \", end_time - start_time)","(!"],"id":8970}],[{"start":{"row":277,"column":6},"end":{"row":278,"column":0},"action":"insert","lines":["",""],"id":8971}],[{"start":{"row":278,"column":0},"end":{"row":279,"column":0},"action":"insert","lines":["",""],"id":8972}],[{"start":{"row":279,"column":0},"end":{"row":280,"column":0},"action":"insert","lines":["",""],"id":8973}],[{"start":{"row":280,"column":0},"end":{"row":282,"column":2},"action":"insert","lines":["end_time := gettime","writeln(\"Time elapsed: \", end_time - start_time)","(!"],"id":8974}],[{"start":{"row":280,"column":0},"end":{"row":282,"column":2},"action":"remove","lines":["end_time := gettime","writeln(\"Time elapsed: \", end_time - start_time)","(!"],"id":8975}],[{"start":{"row":217,"column":0},"end":{"row":218,"column":0},"action":"insert","lines":["",""],"id":8976}],[{"start":{"row":218,"column":0},"end":{"row":219,"column":0},"action":"insert","lines":["",""],"id":8977}],[{"start":{"row":219,"column":0},"end":{"row":221,"column":2},"action":"insert","lines":["end_time := gettime","writeln(\"Time elapsed: \", end_time - start_time)","(!"],"id":8978}],[{"start":{"row":219,"column":0},"end":{"row":221,"column":2},"action":"remove","lines":["end_time := gettime","writeln(\"Time elapsed: \", end_time - start_time)","(!"],"id":8979}],[{"start":{"row":230,"column":0},"end":{"row":232,"column":2},"action":"insert","lines":["end_time := gettime","writeln(\"Time elapsed: \", end_time - start_time)","(!"],"id":8980}],[{"start":{"row":230,"column":0},"end":{"row":232,"column":2},"action":"remove","lines":["end_time := gettime","writeln(\"Time elapsed: \", end_time - start_time)","(!"],"id":8981}],[{"start":{"row":219,"column":0},"end":{"row":221,"column":2},"action":"insert","lines":["end_time := gettime","writeln(\"Time elapsed: \", end_time - start_time)","(!"],"id":8982}],[{"start":{"row":223,"column":0},"end":{"row":230,"column":0},"action":"remove","lines":["! Objective function","","forall(k in Orders) do","DistancePerOrder(k):= sum(i in ShelvesDoor, j in ShelvesDoor | i <> j) (FullDistanceMatrix(i,j) * y(i,j,k))","end-do","","TotalWalkingDistance := sum(k in Orders) DistancePerOrder(k)",""],"id":8983}],[{"start":{"row":276,"column":0},"end":{"row":277,"column":0},"action":"insert","lines":["",""],"id":8984}],[{"start":{"row":277,"column":0},"end":{"row":278,"column":0},"action":"insert","lines":["",""],"id":8985}],[{"start":{"row":278,"column":0},"end":{"row":285,"column":0},"action":"insert","lines":["! Objective function","","forall(k in Orders) do","DistancePerOrder(k):= sum(i in ShelvesDoor, j in ShelvesDoor | i <> j) (FullDistanceMatrix(i,j) * y(i,j,k))","end-do","","TotalWalkingDistance := sum(k in Orders) DistancePerOrder(k)",""],"id":8986}],[{"start":{"row":218,"column":0},"end":{"row":222,"column":0},"action":"remove","lines":["","end_time := gettime","writeln(\"Time elapsed: \", end_time - start_time)","(!",""],"id":8987}],[{"start":{"row":251,"column":0},"end":{"row":255,"column":0},"action":"insert","lines":["","end_time := gettime","writeln(\"Time elapsed: \", end_time - start_time)","(!",""],"id":8988}],[{"start":{"row":252,"column":0},"end":{"row":254,"column":2},"action":"remove","lines":["end_time := gettime","writeln(\"Time elapsed: \", end_time - start_time)","(!"],"id":8989}],[{"start":{"row":251,"column":0},"end":{"row":252,"column":0},"action":"remove","lines":["",""],"id":8990}],[{"start":{"row":250,"column":0},"end":{"row":251,"column":0},"action":"remove","lines":["",""],"id":8991}],[{"start":{"row":389,"column":0},"end":{"row":390,"column":0},"action":"insert","lines":["",""],"id":8992}],[{"start":{"row":390,"column":0},"end":{"row":392,"column":2},"action":"insert","lines":["end_time := gettime","writeln(\"Time elapsed: \", end_time - start_time)","(!"],"id":8993}],[{"start":{"row":392,"column":0},"end":{"row":392,"column":2},"action":"remove","lines":["(!"],"id":8994}],[{"start":{"row":390,"column":0},"end":{"row":393,"column":2},"action":"remove","lines":["end_time := gettime","writeln(\"Time elapsed: \", end_time - start_time)","","!)"],"id":8995}],[{"start":{"row":389,"column":0},"end":{"row":390,"column":0},"action":"remove","lines":["",""],"id":8996}],[{"start":{"row":66,"column":0},"end":{"row":66,"column":2},"action":"remove","lines":["! "],"id":8997},{"start":{"row":67,"column":0},"end":{"row":67,"column":2},"action":"remove","lines":["! "]},{"start":{"row":68,"column":0},"end":{"row":68,"column":2},"action":"remove","lines":["! "]},{"start":{"row":69,"column":0},"end":{"row":69,"column":2},"action":"remove","lines":["! "]},{"start":{"row":71,"column":0},"end":{"row":71,"column":2},"action":"remove","lines":["! "]},{"start":{"row":72,"column":0},"end":{"row":72,"column":2},"action":"remove","lines":["! "]},{"start":{"row":73,"column":0},"end":{"row":73,"column":2},"action":"remove","lines":["! "]},{"start":{"row":74,"column":0},"end":{"row":74,"column":2},"action":"remove","lines":["! "]},{"start":{"row":75,"column":0},"end":{"row":75,"column":2},"action":"remove","lines":["! "]}],[{"start":{"row":66,"column":0},"end":{"row":66,"column":2},"action":"insert","lines":["! "],"id":8998},{"start":{"row":67,"column":0},"end":{"row":67,"column":2},"action":"insert","lines":["! "]},{"start":{"row":68,"column":0},"end":{"row":68,"column":2},"action":"insert","lines":["! "]},{"start":{"row":69,"column":0},"end":{"row":69,"column":2},"action":"insert","lines":["! "]}],[{"start":{"row":179,"column":0},"end":{"row":179,"column":2},"action":"remove","lines":["  "],"id":8999},{"start":{"row":180,"column":0},"end":{"row":180,"column":2},"action":"remove","lines":["  "]},{"start":{"row":181,"column":0},"end":{"row":181,"column":2},"action":"remove","lines":["  "]}],[{"start":{"row":133,"column":8},"end":{"row":133,"column":9},"action":"remove","lines":[" "],"id":9000},{"start":{"row":143,"column":38},"end":{"row":143,"column":39},"action":"remove","lines":[" "]},{"start":{"row":364,"column":0},"end":{"row":364,"column":4},"action":"remove","lines":["    "]}]]},"ace":{"folds":[],"customSyntax":"plugins/fico.ide.language.mosel/mode/mosel","scrolltop":5578,"scrollleft":0,"selection":{"start":{"row":377,"column":4},"end":{"row":388,"column":59},"isBackwards":true},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":370,"state":"start","mode":"plugins/fico.ide.language.mosel/mode/mosel"}},"timestamp":1711110347862}